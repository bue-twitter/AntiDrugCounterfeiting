/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Manufacturer.ShippingManager;

import Business.Enterprise;
import Business.Manufacturer.Drug;
import Business.Manufacturer.ManufacturerEnterprise;
import Business.Manufacturer.ManufacturerShipWorkRequest;
import Business.Network;
import Business.OrderItem;
import Business.Organization;
import Business.UserAccount;
import Business.Wholesaler.WholesalerEnterprise;
import Business.Wholesaler.WholesalerInventoryItem;
import Business.Wholesaler.WholesalerInventoryManagementOrganization;
import Business.Wholesaler.WholesalerOrder;
import Business.Wholesaler.WholesalerShipWorkRequest;
import Business.Wholesaler.WholesalerShippingOrganization;
import Business.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author karanmankodi
 */
public class ShippingEmployeeWorkQueueJPanel extends javax.swing.JPanel {

    private JPanel upcJPanel;
    private ManufacturerEnterprise manuEnt;
    private UserAccount ua;
    Network network;

    /**
     * Creates new form ShippingEmployeeWorkQueueJPanel
     */
    public ShippingEmployeeWorkQueueJPanel(JPanel upcJPanel, Network network, Enterprise ent, UserAccount ua) {
        initComponents();
        this.ua = ua;
        this.upcJPanel = upcJPanel;
        this.manuEnt = (ManufacturerEnterprise) ent;
        this.network = network;
        refreshWorkRequestTable();
    }

    private void refreshWorkRequestTable() {
        int rowCount = tblWorkQueue.getRowCount();

        for (int i = rowCount - 1; i >= 0; i--) {
            ((DefaultTableModel) tblWorkQueue.getModel()).removeRow(i);
        }


        Organization org = manuEnt.getMyOrganization(ua);

        for (WorkRequest request : org.getWorkQueue().getWorkRequestList()) {

            Object row[] = new Object[5];

            row[0] = request;
            row[1] = request.getSender();
            row[2] = request.getReceiver();
            row[3] = request.getStatus();
            row[4] = request.getDrug();

            ((DefaultTableModel) tblWorkQueue.getModel()).addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnWorkOnIt = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblWorkQueue = new javax.swing.JTable();
        backJButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        btnWorkOnIt.setText("Work On It");
        btnWorkOnIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWorkOnItActionPerformed(evt);
            }
        });

        tblWorkQueue.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Request ID", "Sender", "Receiver", "Status", "Drug"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblWorkQueue.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblWorkQueue);

        backJButton.setText("Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("--- PENDING JOBS ---");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(backJButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 88, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(btnWorkOnIt))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1))
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .add(155, 155, 155)
                .add(jLabel1)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 15, Short.MAX_VALUE)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 207, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(backJButton)
                    .add(btnWorkOnIt))
                .add(9, 9, 9))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnWorkOnItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWorkOnItActionPerformed
        // TODO add your handling code here:

        int row = tblWorkQueue.getSelectedRow();

        if (row < 0) {
            return;

        }

        ManufacturerShipWorkRequest request = (ManufacturerShipWorkRequest) tblWorkQueue.getValueAt(row, 0);

        request.setReceiver(ua);
        request.setStatus(WorkRequest.Status.Shipped);
        refreshWorkRequestTable();

        if (request.getReceiver() == ua) {
            for (Network n : Business.Business.getInstance().getNetworkDritectory().getNetworkList()) {
                for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                    if (e instanceof WholesalerEnterprise) {
                        if (e.equals(request.getSalesWorkRequest().getWholeEnt())) {
                            //System.out.println(e);
                            ArrayList<Organization> organizationList = e.getOrganizationDirectory().getOrganizationList();

                            for (Organization o : organizationList) {
                                if (o instanceof WholesalerInventoryManagementOrganization) {
                                    OrderItem oi = request.getOrderItem();
                                    Drug d = request.getDrug();
                                    d.setWholeEnt(request.getSalesWorkRequest().getWholeEnt());
                                    ArrayList<WholesalerEnterprise> wholeEntList;
                                    wholeEntList = n.getEnterpriseDirectory().searchWholeEnterprise();
                                    for (WholesalerEnterprise wholeEnt : wholeEntList) {

                                        if (wholeEnt.equals(request.getSalesWorkRequest().getWholeEnt())) {

                                            int flag = 0;

                                            for (WholesalerInventoryItem wii : wholeEnt.getInvMgmtOrg().getInventory().getStoreInventory()) {
                                                if (wii.getDrug().getId().equals(d.getId())) {
                                                    wii.setQuantity(wii.getQuantity() + request.getOrderItem().getQuantity());
                                                    flag = 1;
                                                }
                                            }

                                            if (flag == 0) {
                                                WholesalerInventoryItem newInventoryItem = wholeEnt.getInvMgmtOrg().getInventory().newInventoryItem();
                                                newInventoryItem.setQuantity(request.getOrderItem().getQuantity());
                                                newInventoryItem.setDrug(d);
                                            }

                                            d.addToPedigree(ua);
                                            d.addToRequestIDs(request.getId());
                                            request.addIDtoList(request.getId());
                                            manuEnt.getMyOrganization(ua).getWorkQueue().removeRequest(request);
                                            if (d.getDispEnt() == null) {
                                                JOptionPane.showMessageDialog(null, "Drug added to Inventory!");
                                                break;
                                            } else {
                                                for (Enterprise ent : network.getEnterpriseDirectory().getEnterpriseList()) {
                                                    if (ent instanceof WholesalerEnterprise) {
                                                        if (ent.equals(wholeEnt)) {
                                                            //System.out.println(e);
                                                            ArrayList<Organization> orgList = e.getOrganizationDirectory().getOrganizationList();

                                                            for (Organization org : orgList) {
                                                                if (org instanceof WholesalerShippingOrganization) {
                                                                    WholesalerShipWorkRequest req;
                                                                    req = (WholesalerShipWorkRequest) org.getWorkQueue().newWorkRequest(WorkRequest.Type.WholesalerShipWorkRequest);
                                                                    req.setSender(ua);
                                                                    req.setDrug(d);
                                                                    req.setQuantity(request.getOrderItem().getQuantity());
                                                                    req.setStatus(WorkRequest.Status.Processsing);
                                                                    req.setOrderItem(oi);
                                                                    //req.setSalesWorkRequest(request.getSalesWorkRequest().getWholeShipWorkRequest().getSalesWorkRequest());
                                                                    //for (WholesalerInventoryItem wii : wholeEnt.getInvMgmtOrg().getInventory().getStoreInventory()) {
                                                                    //    if (wii.getDrug().getId().equals(d.getId())) {
                                                                    //        wii.setQuantity(wii.getQuantity() + request.getOrderItem().getQuantity());

                                                                    //    }
                                                                    //}
                                                                    d.addToPedigree(ua);
                                                                    //Adding request to sender's list
                                                                    Organization organ = manuEnt.getMyOrganization(ua);
                                                                    organ.getSentWorkQueue().addRequest(req);
                                                                    organ.getWorkQueue().removeRequest(request);
                                                                    //WholesalerOrder addedOrder = wholeEnt.getSalesOrg().getMasterOrderList().addOrder(tempOrder, ua);
                                                                    //JOptionPane.showMessageDialog(null, "Order Placed!");

                                                                    JOptionPane.showMessageDialog(null, "New Wholesaler Shipping Request Generated!!!");
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                //Adding request to sender's list
                                                //Organization org = manuEnt.getMyOrganization(ua);
                                                //org.getSentWorkQueue().addRequest(req);

                                                //JOptionPane.showMessageDialog(null, "Item Addded to Inventory!");
                                            }

                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_btnWorkOnItActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        // TODO add your handling code here:
        upcJPanel.remove(this);
        CardLayout cardLayout = (CardLayout) upcJPanel.getLayout();
        cardLayout.previous(upcJPanel);
    }//GEN-LAST:event_backJButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JButton btnWorkOnIt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblWorkQueue;
    // End of variables declaration//GEN-END:variables
}
