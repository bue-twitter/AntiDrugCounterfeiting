/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Wholesaler.SalesEmployee;

import Business.Dispenser.DispenserEnterprise;
import Business.Enterprise;
import Business.Manufacturer.Drug;
import Business.Manufacturer.ManufacturerEnterprise;
import Business.Manufacturer.ManufacturerSalesOrganization;
import Business.Manufacturer.ManufacturerSalesWorkRequest;
import Business.Network;
import Business.Organization;
import Business.UserAccount;
import Business.Wholesaler.WholesalerEnterprise;
import Business.Wholesaler.WholesalerInventoryItem;
import Business.Wholesaler.WholesalerOrder;
import Business.Wholesaler.WholesalerOrderItem;
import Business.Wholesaler.WholesalerSalesWorkRequest;
import Business.Wholesaler.WholesalerShipWorkRequest;
import Business.Wholesaler.WholesalerShippingOrganization;
import Business.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author karanmankodi
 */
public class WholesalerOrderProcessingJPanel extends javax.swing.JPanel {

    JPanel upcJPanel;
    WholesalerEnterprise wholeEnt;
    UserAccount ua;
    Network network;
    WholesalerOrder tempOrder;
    Drug d;
    Drug oiDrug;
    WholesalerOrderItem oi;
    DispenserEnterprise tempDispEnt;

    /**
     * Creates new form WholesalerOrderProcessingJPanel
     */
    public WholesalerOrderProcessingJPanel(JPanel upcJPanel, Network network, Enterprise ent, UserAccount ua) {
        initComponents();
        this.upcJPanel = upcJPanel;
        this.wholeEnt = (WholesalerEnterprise) ent;
        this.ua = ua;
        this.network = network;
        tempOrder = new WholesalerOrder();

        cartRefresh();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        refreshCartJButton = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        cartJTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        refreshCartJButton.setText("Refresh Cart");
        refreshCartJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshCartJButtonActionPerformed(evt);
            }
        });

        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });

        backJButton.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        backJButton.setText("Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        cartJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Order ID", "Drug Name", "Price", "Quantity", "Total Amount"
            }
        ));
        jScrollPane2.setViewportView(cartJTable);

        jLabel1.setText("--- ORDER PROCESSING ---");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane2)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, backJButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, refreshCartJButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(372, 372, 372)
                .add(processJButton)
                .add(0, 0, Short.MAX_VALUE))
            .add(layout.createSequentialGroup()
                .add(194, 194, 194)
                .add(jLabel1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(13, 13, 13)
                .add(jLabel1)
                .add(18, 18, 18)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                .add(21, 21, 21)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(processJButton)
                    .add(refreshCartJButton))
                .add(7, 7, 7)
                .add(backJButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    public void cartRefresh() {
        int rowCount = cartJTable.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            ((DefaultTableModel) cartJTable.getModel()).removeRow(i);
        }



        ArrayList<WorkRequest> swList = wholeEnt.getMyOrganization(ua).getWorkQueue().getWorkRequestList();
        for (WorkRequest wr : swList) {
            if (wr instanceof WholesalerSalesWorkRequest) {

                Object row[] = new Object[5];
                row[1] = wr.getDrug();
                row[2] = wr.getDrug().getPrice();
                row[3] = wr.getQuantity();
                row[4] = (wr.getQuantity()) * (wr.getDrug().getPrice());
                row[0] = wr;
                ((DefaultTableModel) cartJTable.getModel()).addRow(row);
            }
        }
    }

    private void refreshCartJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshCartJButtonActionPerformed
        // TODO add your handling code here:
        cartRefresh();
    }//GEN-LAST:event_refreshCartJButtonActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = cartJTable.getSelectedRow();
        Drug d = (Drug) cartJTable.getValueAt(selectedRow, 1);
        WholesalerSalesWorkRequest salesReq = (WholesalerSalesWorkRequest) cartJTable.getValueAt(selectedRow, 0);

        if (d.getLicense().equals(Boolean.TRUE)) {
            salesReq.setReceiver(ua);
            salesReq.setStatus(WorkRequest.Status.Processsing);

            int quantity = 0;
            Boolean flag = Boolean.TRUE;

            if (wholeEnt.getInvMgmtOrg().getInventory().getStoreInventory().size() <= 0) {
                JOptionPane.showMessageDialog(null, "No item in iventory!");
                return;
            } else {
                for (WholesalerInventoryItem wii : wholeEnt.getInvMgmtOrg().getInventory().getStoreInventory()) {
                    if (wii.getDrug().getId().equals(salesReq.getDrug().getId()) && salesReq.getQuantity() <= wii.getQuantity()) {

                        for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()) {
                            if (e instanceof WholesalerEnterprise) {
                                if (e.equals(wholeEnt)) {
                                    //System.out.println(e);
                                    ArrayList<Organization> organizationList = e.getOrganizationDirectory().getOrganizationList();

                                    for (Organization o : organizationList) {
                                        if (o instanceof WholesalerShippingOrganization) {
                                            WholesalerShipWorkRequest req;
                                            req = (WholesalerShipWorkRequest) o.getWorkQueue().newWorkRequest(WorkRequest.Type.WholesalerShipWorkRequest);
                                            req.setSender(ua);
                                            req.setDrug((Drug) cartJTable.getValueAt(selectedRow, 1));
                                            req.setQuantity(Integer.parseInt(cartJTable.getValueAt(selectedRow, 3).toString()));
                                            req.setStatus(WorkRequest.Status.Processsing);
                                            req.setSalesWorkRequest((WholesalerSalesWorkRequest) cartJTable.getValueAt(selectedRow, 0));
                                            oi = tempOrder.newOrderItem();
                                            oiDrug = (Drug) cartJTable.getValueAt(selectedRow, 1);
                                            oi.setDrug(oiDrug);
                                            oi.setQuantity(Integer.parseInt(String.valueOf(cartJTable.getValueAt(selectedRow, 3))));
                                            oi.setPrice(oiDrug.getPrice());
                                            oi.setId(req.getId());
                                            tempOrder.setUa(ua);
                                            req.setOrderItem(oi);
                                            quantity = wii.getQuantity() - oi.getQuantity();
                                            wii.setQuantity(quantity);
                                            oiDrug.addToPedigree(ua);
                                            oiDrug.addToRequestIDs(req.getId());
                                            req.addIDtoList(req.getId());
                                            //Adding request to sender's list
                                            Organization org = wholeEnt.getMyOrganization(ua);
                                            org.getSentWorkQueue().addRequest(req);
                                            org.getWorkQueue().removeRequest(salesReq);
                                            flag = Boolean.FALSE;

                                            WholesalerOrder addedOrder = wholeEnt.getSalesOrg().getMasterOrderList().addOrder(tempOrder, ua);
                                            JOptionPane.showMessageDialog(null, "Order Placed!");

                                            JOptionPane.showMessageDialog(null, "New Request Generated!!!");
                                            return;
                                        }
                                    }
                                }
                            }

//                        } else if (salesReq.getQuantity() > wii.getQuantity()){
//                            int q = salesReq.getQuantity() - wii.getQuantity();
//                            for (Network n : Business.Business.getInstance().getNetworkDritectory().getNetworkList()) {
//                                for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
//                                    if (e instanceof ManufacturerEnterprise) {
//                                        ArrayList<Organization> organizationList = e.getOrganizationDirectory().getOrganizationList();
//                                        if (e.equals(salesReq.getDrug().getManuEnt())) {
//                                            for (Organization o : organizationList) {
//                                                if (o instanceof ManufacturerSalesOrganization) {
//
//                                                    ManufacturerSalesWorkRequest request = (ManufacturerSalesWorkRequest) o.getWorkQueue().newWorkRequest(WorkRequest.Type.ManufacturerSalesWorkRequest);
//                                                    request.setSender(ua);
//                                                    request.setDrug(salesReq.getDrug());
//                                                    request.setQuantity(q);
//                                                    request.setManuEnt(salesReq.getDrug().getManuEnt());
//                                                    request.setWholeEnt(wholeEnt);
//                                                    salesReq.getDrug().addToPedigree(ua);
//                                                    salesReq.getDrug().addToRequestIDs(request.getId());
//                                                    //Adding request to sender's list
//                                                    Organization org = wholeEnt.getMyOrganization(ua);
//                                                    org.getSentWorkQueue().addRequest(request);
//                                                    org.getWorkQueue().removeRequest(salesReq);
//                                                    flag = Boolean.FALSE;
//
//                                                    JOptionPane.showMessageDialog(null, "New Manufacturing Request Generated for Partial Quantity!");
//                                                    return;
//                                                }
//                                            }
//
//                                        }
//                                    }
//                                }
//                            }
//                        }
                        }
                    } else {
                        if (flag.toString().equalsIgnoreCase("true")) {
                            for (Network n : Business.Business.getInstance().getNetworkDritectory().getNetworkList()) {
                                for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                                    if (e instanceof ManufacturerEnterprise) {
                                        ArrayList<Organization> organizationList = e.getOrganizationDirectory().getOrganizationList();
                                        if (e.equals(salesReq.getDrug().getManuEnt())) {
                                            for (Organization o : organizationList) {
                                                if (o instanceof ManufacturerSalesOrganization) {

                                                    ManufacturerSalesWorkRequest request = (ManufacturerSalesWorkRequest) o.getWorkQueue().newWorkRequest(WorkRequest.Type.ManufacturerSalesWorkRequest);
                                                    request.setSender(ua);
                                                    request.setDrug(salesReq.getDrug());
                                                    request.setQuantity(salesReq.getQuantity());
                                                    request.setManuEnt(salesReq.getDrug().getManuEnt());
                                                    request.setWholeEnt(wholeEnt);
                                                    salesReq.getDrug().addToPedigree(ua);
                                                    salesReq.getDrug().addToRequestIDs(request.getId());

                                                    //Adding request to sender's list
                                                    Organization org = wholeEnt.getMyOrganization(ua);
                                                    org.getSentWorkQueue().addRequest(request);
                                                    org.getWorkQueue().removeRequest(salesReq);
                                                    JOptionPane.showMessageDialog(null, "New Manufacturing Request Generated!!!");
                                                }
                                            }

                                        }
                                    }
                                }
                            }
                        }
                    }

                }
            }

        } else {
            JOptionPane.showMessageDialog(null, "Drug not licensed for trade");
        }


        upcJPanel.remove(this);
        CardLayout card = (CardLayout) upcJPanel.getLayout();
        card.previous(upcJPanel);
    }//GEN-LAST:event_processJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        // TODO add your handling code here:

        upcJPanel.remove(this);
        CardLayout cardLayout = (CardLayout) upcJPanel.getLayout();
        cardLayout.previous(upcJPanel);
    }//GEN-LAST:event_backJButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JTable cartJTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton refreshCartJButton;
    // End of variables declaration//GEN-END:variables
}
